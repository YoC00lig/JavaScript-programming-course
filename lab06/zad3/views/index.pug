doctype html
html(lang='en')
    head
        meta(charset='UTF-8')
        title Form
        link(rel="stylesheet", href="https://unpkg.com/mocha/mocha.css")
        style.
            table {
                width: 100%;
            }
            td {
                border: 1px solid #000; 
                padding: 15px;
                text-align: left;
            }
            th {
                background-color: #04AA6D;
                color: white;import express from 'express';
            }
        script.

            // Definicja funkcji asynchronicznej getTime
            function getTime(europe_city) {
                return new Promise((resolve, reject) => {
                    const url = `http://worldtimeapi.org/api/timezone/Europe/${encodeURIComponent(europe_city)}`;
                    
                    fetch(url)
                    .then(response => {
                        if (response.status === 200) {
                        return response.json();
                        } else {
                        throw new Error(`Error: ${response.statusText}`);
                        }
                    })
                    .then(data => {
                        resolve(data);
                    })
                    .catch(error => {
                        reject(error.message);
                    });
                });
            }
            
            function handleFormSubmit() {
                event.preventDefault();
                const europeCity = document.getElementById('city').value;
                const resultDiv = document.getElementById('zad2');
                getTime(europeCity)
                    .then(function(timeData) {
                        resultDiv.textContent = JSON.stringify(timeData);
                    })
                    .catch(function(error) {
                        resultDiv.textContent = `Error: ${error.message}`;
                    });
            }


            /**************************************************************************************/
            /* Function that retrieves the content of one of the selected text fields of the form */
            /**************************************************************************************/
            function getName(http_method){
                let name = '';

                if (http_method === 'GET') {
                    const nameInput = document.getElementById('name_GET');
                    name = nameInput.value;
                } else if (http_method === 'POST') {
                    const nameInput = document.getElementById('name_POST');
                    name = nameInput.value;
                }

                return name;
            }
            
            /**************************************************************************************/
            /* Function that performs (asynchronous) query to the web server using AJAX           */
            /**************************************************************************************/
            /* http_method ∈ ["GET", "POST"]                                                      */ 
            /* response_type ∈ ["text", "json", "document"]                                       */ 
            /* name - Contents of the form's text box - data that needs to be sent asynchronously */
            /**************************************************************************************/
            function requestAJAX(http_method, response_type, name, show_alert=false) {
                const xhr = new XMLHttpRequest();
                
                xhr.addEventListener("load", function (evt) {                          
                    if (xhr.status === 200) {
                        console.group('AJAX');
                        console.log(`HTTP method ⟶\t\t${http_method}\nResponse type ⟶\t${response_type}\nInput data ⟶\t\t${name}`);
                        console.log('Response', xhr.response);
                        console.groupEnd();

                        let response = xhr.response;
                        
                        if (show_alert) {
                            if (response_type === 'json') response = JSON.stringify(response); // przeksztalcenie w ciag znakow json 
                            else if (response_type === 'document') {
                                const tag = response.documentElement.nodeName; // Pobiera nazwę tagu głównego elementu XML, który jest przechowywany w response. Nodename oznacza nazwę głównego elementu dokumentu xml
                                response = `<${tag}>${response.documentElement.textContent}</${tag}>`;
                            }
                            document.getElementById('zad2').textContent = response;

                        } else {
                            results.set(`ajax ${http_method} ${response_type}`, xhr.response);
                            dispatchEvent(received);
                        }
                    }
                });
                
                xhr.addEventListener("error", function (evt) {
                    window.alert('There was a problem with this request.');
                });
                
                xhr.responseType = response_type;
                let url = `http://localhost:8000/submit`;
                if (http_method === 'GET') {
                    // Jeśli http_method ma wartość 'GET', to oznacza, że dane mają zostać dołączone do URL 
                    // jako parametr z nazwą "name". Wykorzystywana jest funkcja encodeURIComponent(name),
                    // która przekształca wartość zmiennej name na format, który jest bezpieczny do umieszczenia w adresie URL.

                    // Jeśli jednak http_method ma wartość 'POST', nie ma potrzeby dołączania danych do URL

                    // Ten proces umożliwia przekazanie danych w żądaniu HTTP, zarówno dla metody GET, jak i POST. 
                    // Dla metody GET dane są dołączane do URL, natomiast dla metody POST dane są przesyłane jako część treści żądania
                    url += `?name=${encodeURIComponent(name)}`;
                }
                xhr.open(http_method, url, true);


                
                switch(response_type) {
                    case 'json':
                        xhr.setRequestHeader('Accept', 'application/json');
                        break;
                    case 'document':
                        xhr.setRequestHeader('Accept', 'application/xml');
                        break;
                }
                
                if (http_method === 'POST') {
                    xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8'); /// informacja dla serwera o formacie danych, które są wysyłane w ciele żądania ( w tym wypadku jest to json)
                    xhr.send(JSON.stringify({ name })); // Ta linia wysyła żądanie do serwera - jesli http_method  = post to wysylane sa dane
                } 
                else xhr.send(); // mamy ządanie GET ktore nie wymaga ciała ządania.
            }

            /**************************************************************************************/
            /* Function that performs (asynchronous) query to the web server  usingFetch API      */
            /**************************************************************************************/
            /* http_method ∈ ["GET", "POST"]                                                      */ 
            /* response_type ∈ ["text", "json", "xml"]                                            */ 
            /* name - Contents of the form's text box - data that needs to be sent asynchronously */
            /**************************************************************************************/
            async function requestFetchAPI(http_method, response_type, name, show_alert = false) {
            let accept = "*/*";
            switch (response_type) {
                case "json":
                accept = "application/json";
                break;
                case "xml":
                accept = "application/xml";
                break;
            }

            let url = "http://localhost:8000/submit";
            let requestBody = null;
            if (http_method === "GET") url += `?name=${encodeURIComponent(name)}`;
            else if (http_method === "POST") requestBody = JSON.stringify({ name: name });

            try {
                const response = await fetch(url, {
                    method: http_method,
                     headers: {
                        //****************************************************************************************
                        // What is the acceptable data type—the server part should return data of the given type
                        //****************************************************************************************
                        'Accept': accept,
                        'Content-Type': 'application/json;charset=utf-8'
                    },
                    body: requestBody
                    })

                if (!response.ok)
                    throw Error(response.statusText);

                console.group('Fetch API');
                console.log(`HTTP method ⟶\t\t${http_method}\nResponse type ⟶\t${response_type}\nInput data ⟶\t\t${name}`);

                let result = !response.headers.get('content-type')?.includes('application/json') ? await response.text() : await response.json();

                result = result instanceof Object ? result : decodeHtml(result);

                console.log(result);
                console.groupEnd();

                if(show_alert) {
                    if (result instanceof Object) result = JSON.stringify(result);

                    document.getElementById('zad2').textContent = result;
                }
                else {
                    results.set(`fetch ${http_method} ${response_type}`, result);
                    dispatchEvent(received);
                }
                }
                catch(error) {
                    console.error(error);
                }
            }

        script(src="https://unpkg.com/chai/chai.js")
        script(src="https://unpkg.com/mocha/mocha.js") 
    body
        script(class="mocha-init").
            mocha.setup('bdd');
            mocha.checkLeaks(); 
        main
            table
                tr
                    th  
                    th GET
                    th POST
                tr 
                    th(colspan='3', style=' background-color: #04556D;') Without AJAX and Fetch API
                tr
                    th HTTP
                    td 
                        form(action="http://localhost:8000/submit", method="GET")
                            label(for="name_GET") Your name
                            input(type="text", id="name_GET", name="name")
                            br
                            input(type="submit", value="text")
                    td 
                        form(action="http://localhost:8000/submit", method="POST") 
                            label(for="name_POST") Your name
                            input(type="text", id="name_POST", name="name")
                            br
                            input(type="submit", value="text")
                tr 
                    th(colspan='3', style=' background-color: #04556D;')  Asynchronous requests
                tr 
                    th AJAX 
                    each method in ["GET", "POST"]
                        td
                            each type in ["text", "json", "document"]
                                
                                button(onclick=`console.clear() ; requestAJAX("${method}","${type}", getName('${method}'), true)`) #{type}
                tr
                    th Fetch API 
                    each method in ["GET", "POST"]
                        td
                            each type in ["text", "json", "xml"]
                                button(onclick=`console.clear() ; requestFetchAPI("${method}","${type}", getName('${method}'), true)`) #{type}
            
            form(id='form')
                h1 Check Weather
                input(id="city")
                button(onclick='handleFormSubmit()') SUBMIT
            div(id='zad2')
        h1 Unit tests
        button(onclick='window.location.reload();') Restart
        div(id="mocha")
        script.
            const name = 'ą/?:@&=+$#';
            if(window.location.port == 8000) { 
                window.addEventListener("load", (event) => {
                    for(let method of ["GET","POST"]){
                        for(let type of ["text", "json", "document"])
                            requestAJAX(method, type, name);                        
                        for(let type of ["text", "json", "xml"])
                            requestFetchAPI(method, type, name);
                    }
                })
            };
        script(class="mocha-exec").
            //****************************************************************************************
            // Unit tests
            //****************************************************************************************
            var results = new Map();
            var received = new Event('received');
            var test_executed = false;
            function decodeHtml(html) {
                var txt = document.createElement("textarea");
                txt.innerHTML = html;
                return txt.value;
            }
            addEventListener('received', (e) => {
                if(!test_executed && results.size === 12){
                    const expect = chai.expect; 
                    const parser = new DOMParser();
                    const xml_document= parser.parseFromString("<welcome>Hello 'ą/?:@&=+$#'</welcome>","text/xml");
                    describe('AJAX requests', function() {
                        it(`Returns "Hello '${name}'" for requestAJAX('GET','text')`, function() {
                            expect(results.get('ajax GET text')).to.equal(`Hello '${name}'`);
                        });
                        it(`Returns "Hello '${name}'" for requestAJAX('GET','json')`, function() {
                            expect(results.get('ajax GET json')).to.eql({welcome: `Hello '${name}'`});
                        });
                        it(`Returns "Hello '${name}'" for requestAJAX('GET','document')`, function() {
                            expect(results.get('ajax GET document').documentElement.firstChild.data).to.equal(xml_document.documentElement.firstChild.data);
                        });
                        it(`Returns "Hello '${name}'" for requestAJAX('POST','text')`, function() {
                            expect(results.get('ajax POST text')).to.equal(`Hello '${name}'`);
                        });
                        it(`Returns "Hello '${name}'" for requestAJAX('POST','json')`, function() {
                            expect(results.get('ajax POST json')).to.eql({welcome: `Hello '${name}'`});
                        });
                        it(`Returns "Hello '${name}'" for requestAJAX('POST','document')`, function() {
                            expect(results.get('ajax POST document').documentElement.firstChild.data).to.equal(xml_document.documentElement.firstChild.data);
                        });
                    });
            
                    describe('Fetch API requests', function() {   
                        it(`Returns "Hello '${name}'" for requestFetchAPI('GET','text')`, async function() {
                            const result  = await results.get('fetch GET text')
                            expect(result).to.equal(`Hello '${name}'`);
                        });
                        it(`Returns "Hello '${name}'" for requestFetchAPI('GET','json')`, async function() {
                            const result  = await results.get('fetch GET json')
                            expect(result).to.eql({welcome: `Hello '${name}'`});
                        });   
                        it(`Returns "Hello '${name}'" for requestFetchAPI('GET','xml')`, async function() {
                            const result  = await results.get('fetch GET xml');
                            expect(decodeHtml(result)).to.equal(`<welcome>Hello '${name}'</welcome>`);
                        }); 
                        it(`Returns "Hello '${name}'" for requestFetchAPI('POST','text')`, async function() {
                            const result  = await results.get('fetch POST text')
                            expect(result).to.equal(`Hello '${name}'`);                   
                        });
                        it(`Returns "Hello '${name}'" for requestFetchAPI('POST','json')`, async function() {
                            const result  = await results.get('fetch POST json')
                            expect(result).to.eql({welcome: `Hello '${name}'`});
                        });   
                        it(`Returns "Hello '${name}'" for requestFetchAPI('POST','xml')`, async function() {
                            const result  = await results.get('fetch POST xml');
                            expect(decodeHtml(result)).to.equal(`<welcome>Hello '${name}'</welcome>`);
                        });    
                    });     
                    
                    mocha.run();
                    test_executed = true;
                }
            });